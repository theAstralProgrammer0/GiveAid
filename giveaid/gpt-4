Backend
giveaid_project/settings.py:
```
from pathlib import Path
from dotenv import load_dotenv
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, '.env'))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = "giveaid.User"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local apps
    'giveaid.apps.GiveaidConfig',
    'api.apps.ApiConfig',


    # Third party
    'jazzmin',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',

    # CORS handling ..
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'giveaid_project.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'giveaid_project.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'GMT'

USE_I18N = True

USE_TZ = True



STATIC_URL = 'static/'


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Django Rest Framework settings for session-based authentication
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # This would be adjusted per the Frontend URL
]

# Email backend for development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Sites framework
SITE_ID = 1

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
```

giveaid_project/urls.py:
```
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include("api.urls")),
    path('api-auth/', include("rest_framework.urls")),
    path('', include("api.urls"))
]
```

api/urls.py:
```
from django.urls import path
from rest_framework.authtoken.views import obtain_auth_token
from api.views import UserRegisterView, UserLoginView, ListUsersView, UserLogoutView, UserView, RefreshTokenView

urlpatterns = [
    path('user/register/', UserRegisterView.as_view(), name='user_register'),
    path('user/login/', UserLoginView.as_view(), name='user_login'),
    path('user/logout', UserLogoutView.as_view(), name='user logout'),
    path('user/', UserView.as_view(), name='user view'),
    path('users/list', ListUsersView.as_view(), name="list user"),
    path('user/refresh-token/', RefreshTokenView.as_view(), name='refresh-token'),
    # path('/user/password/reset/', PasswordResetView.as_view(), name='password_reset'),
    # path('/user/password/reset/confirm/', PasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    # path('/user/email/verify/', EmailVerificationView.as_view(), name='email_verify'),

    # Donation and Payment URLs
    # path('/donation/create/', DonationCreateView.as_view(), name='donation_create'),
    # path('/payment/process/', PaymentProcessView.as_view(), name='payment_process')
]
```

api/views.py:
```
from rest_framework import permissions, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.exceptions import AuthenticationFailed
from .permissions import IsAdminUser
from .utils import generate_token, generate_refresh_token, JWTAuthentication
from giveaid.models import User, Cause, UserDonation, UnregisteredDonation, Payment, SuccessStory
from .serializers import (
    UserRegisterSerializer,
    CauseSerializer,
    UserSerializer,
    UnregisteredDonationSerializer,
    PaymentSerializer,
    SuccessStorySerializer,
)


class UserRegisterView(APIView):
    """
    A view for handling user registration.

    This view handles POST requests to register a new user. It uses a serializer
    to validate and save the user data.

    Attributes:
        permission_classes (tuple): Specifies the permissions that apply to this view.
    """
    permission_classes = (permissions.AllowAny,)

    def post(self, request):
        serializer = UserRegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()

        return Response({
            "Message": "User Created Successfully"
        })


class UserLoginView(APIView):
    """
    A view for handling user login and authentication.

    This view handles POST requests to authenticate a user based on email and password.
    If authentication is successful, it generates access and refresh tokens, sets an
    HTTP-only cookie for the access token, and returns the tokens in the response.

    Attributes:
        permission_classes (tuple): Specifies the permissions that apply to this view.
    """
    permission_classes = (permissions.AllowAny,)

    def post(self, request):
        email = request.data['email']
        password = request.data['password']

        user = User.objects.filter(email=email).first()
        if user is None:
            raise AuthenticationFailed('User Not Found')

        if not user.check_password(password):
            raise AuthenticationFailed('Incorrect Password')

        if user.is_active:
            user_access_token = generate_token(user)
            refresh_token = generate_refresh_token(user)
            response = Response()
            response.set_cookie(key='access_token', value=user_access_token, httponly=True)
            response.data = {
                'access_token': user_access_token,
                'refresh_token': refresh_token
            }
            return response

        return Response({
            'message': 'Uh Uh! Something went wrong'
        }, status=status.HTTP_400_BAD_REQUEST)


class ListUsersView(APIView):
    """
    A view for listing all users.

    This view allows only admin users to retrieve a list of all users registered
    in the system. It uses JWT authentication to verify the user's identity.

    Attributes:
        authentication_classes (list): Specifies the authentication classes used for this view.
        permission_classes (tuple): Specifies the permissions that apply to this view.
    """
    authentication_classes = [JWTAuthentication]
    permission_classes = (IsAdminUser,)

    def get(self, request):
        users = User.objects.all()
        if not users.exists():
            return Response({
                "detail": "No users found"
            }, status=status.HTTP_404_NOT_FOUND)

        serializer = UserSerializer(users, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)


class RefreshTokenView(APIView):
    """
    A view for refreshing access tokens using a refresh token.

    This view handles POST requests to refresh an access token using a provided
    refresh token. It decodes the refresh token to retrieve the user ID, generates
    a new access token and refresh token pair, and returns them in the response.

    Methods:
        post(request): Handles POST requests to refresh tokens.
    """
    def post(self, request):
        refresh_token = request.data.get('refresh_token')
        if refresh_token is None:
            raise AuthenticationFailed('Refresh token is required')

        user_id = JWTAuthentication.decode_refresh_token(refresh_token)
        user = User.objects.filter(id=user_id).first()
        if user is None:
            raise AuthenticationFailed('User not found')

        access_token = generate_token(user)
        refresh_token = generate_refresh_token(user)
        response_data = {
            'access-token': access_token,
            'refresh_token': refresh_token
        }

        return Response(response_data)


class UserLogoutView(APIView):
    """
    A view for handling user logout.

    This view allows users to log out by deleting the access token cookie.
    It does not require authentication to access this endpoint.

    Attributes:
        authentication_classes (list): Specifies the authentication classes used for this view.
        permission_classes (tuple): Specifies the permissions that apply to this view.
    """
    authentication_classes = [JWTAuthentication]
    permission_classes = (permissions.AllowAny,)

    def get(self, request):
        user_token = request.COOKIES.get('access_token', None)
        if user_token:
            response = Response()
            response.delete_cookie('access_token')
            response.data = {
                'message': 'Logged Out Successfully'
            }
            return response

        response = Response()
        response.data = {
            'message': 'User is already logged out'
        }
        return response


class UserView(APIView):
    pass

class PasswordReset(APIView):
    pass

class PasswordResetConfirm(APIView):
    pass
```

api/serializers.py:
```
from rest_framework import serializers
from rest_framework.response import Response
from giveaid.models import User, Cause, UserDonation, UnregisteredDonation, Payment, SuccessStory


class UserRegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'firstname', 'lastname', 'password']
        extra_args = {
            'password': {'write_only': True}
        }

    def create(self, validated_data):
        password = validated_data.get('password', None)
        instance = self.Meta.model(**validated_data)
        if password is not None:
            instance.set_password(password)
        instance.save()

        return Response(instance)


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'firstname', 'middlename', 'lastname', 'dob', 'mobile', 'country', 'state', 'city', 'street']


class CauseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Cause
        fields = '__all__'


class UserDonationSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserDonation
        fields = '__all__'


class UnregisteredDonationSerializer(serializers.ModelSerializer):
    class Meta:
        model = UnregisteredDonation
        fields = '__all__'


class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = '__all__'


class SuccessStorySerializer(serializers.ModelSerializer):
    class Meta:
        model = SuccessStory
        fields = '__all__'
```

Frontend
App.jsx:
```
/* src/App.jsx */
import React, { useState, useEffect } from 'react';
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Home from './components/Home';
import Donate from './components/Donate';
import Volunteer from './components/Volunteer';
import SuccessStories from './components/SuccessStories';
import WhoWeAre from './components/WhoWeAre';
import ContactUs from './components/ContactUs';
import Signup from './components/Signup';
import Login from './components/Login';
import FAQ from './components/FAQ';
import Modal from './components/Modal';
import ForgotPassword from './components/ForgotPassword';
import ResetPassword from './components/ResetPassword';

const App = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(true);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  useEffect(() => {
    if (isModalOpen) {
      document.body.style.overflow = 'scroll';
    } else {
      document.body.style.overflow = 'auto';
    }
  }, [isModalOpen]);

  return (
    <div className={isDarkMode ? 'dark' : ''}>
      <BrowserRouter>
        <Routes>
          <Route
            path="/"
            element={
              <div className="dark:bg-palette-dark">
                <Navbar toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />
                {isModalOpen && <Modal onClose={closeModal} />}
                <Home />
                <WhoWeAre />
                <Donate />
                <Volunteer />
                <SuccessStories />
                <ContactUs />
                <FAQ />
                <Footer />
              </div>
            }
          />
          <Route path="/signup" element={<Signup toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />} />
          <Route path="/login" element={<Login toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />} />
          <Route path="/volunteer" element={<Volunteer />} />
          <Route path="/forgot-password" element={<ForgotPassword toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />} />
          <Route path="/reset-password" element={<ResetPassword toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
};

export default App;
```

rootReducer.js:
```
/* src/redux/rootReducer.js */
import { combineReducers } from 'redux';
import donationsReducer from './slices/donationsSlice';
import userReducer from './slices/userSlice';
import causeReducer from './slices/causeSlice';

const rootReducer = combineReducers({
  donations: donationsReducer,
  user: userReducer,
  cause: causeReducer,
});

export default rootReducer;
```

store.js:
```
/* src/redux/store.js */
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './rootReducer';

const store = configureStore({
  reducer: rootReducer,
});

export default store;
```

slice/causeSlice.js:
```
/* src/redux/slices/causeSlice.js */
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api from '../../services/api';

export const fetchCauses = createAsyncThunk('cause/fetchCauses', async () => {
  const response = await api.get('/causes');
  return response.data;
});

const causeSlice = createSlice({
  name: 'cause',
  initialState: {
    items: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCauses.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchCauses.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchCauses.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default causeSlice.reducer;
```

slice/donationSlice.js:
```
/* src/redux/slices/donationsSlice.js */
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getDonations } from '../../services/donations';

export const fetchDonations = createAsyncThunk('donations/fetchDonations', async () => {
  const response = await getDonations();
  return response;
});

const donationsSlice = createSlice({
  name: 'donations',
  initialState: {
    items: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDonations.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchDonations.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchDonations.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default donationsSlice.reducer;
```

slice/userSlice.js:
```
/* src/redux/slices/userSlice.js */
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import api from '../../services/api';

export const fetchUsers = createAsyncThunk('user/fetchUsers', async () => {
  const response = await api.get('/users');
  return response.data;
});

const userSlice = createSlice({
  name: 'user',
  initialState: {
    items: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

export default userSlice.reducer;
```

services/api.js:
```
/* src/services/api.js */
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://api.giveaid.com', // Update with actual base URL
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
```
